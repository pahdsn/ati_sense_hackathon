shapefile = SHAPEFILE_DIR + "seaice_s1_20180116t075430.shp"
shp_id = shapefile.split("_")[-1][:-4].upper()
tiff_files = [g for g in glob.glob(TIFF_DIR+'/*.tif')]
# locate the corresponding Sentinel-1 image based on the ID
# this should only return 1 match, which you can confirm
tiff_file = [g for g in tiff_files if shp_id in g]
tiff_file = tiff_file[0]
ds = gdal.Open(tiff_file)
width = ds.RasterXSize
height = ds.RasterYSize
gt = ds.GetGeoTransform()
minx = gt[0]
miny = gt[3] + width*gt[4] + height*gt[5] 
maxx = gt[0] + width*gt[1] + height*gt[2]
maxy = gt[3] 
shape_data = gpd.read_file(shapefile)
dataset = ds

chunksize = 64
chunkmid = chunksize/2
numperrow = np.int(width/chunksize)-1
numpercol = np.int(height/chunksize)-1

tensorlist = []

r = dataset.GetRasterBand(1).ReadAsArray()
g = dataset.GetRasterBand(2).ReadAsArray()
b = dataset.GetRasterBand(3).ReadAsArray()

for i in range(numperrow-1):
  print(i)
  xrangemin = i*chunksize
  xrangemax = (i+1)*chunksize
  for j in range(numpercol-1):
    yrangemin = j*chunksize
    yrangemax = (j+1)*chunksize
    rc = r[xrangemin:xrangemax, yrangemin:yrangemax]
    gc = g[xrangemin:xrangemax, yrangemin:yrangemax]
    bc = b[xrangemin:xrangemax, yrangemin:yrangemax]
    rgbArray = np.zeros((rc.shape[0],rc.shape[1],3), 'uint8')
    rgbArray[..., 0] = rc
    rgbArray[..., 1] = gc
    rgbArray[..., 2] = bc

    tensorlist.append(torch.tensor(rgbArray))




# changes to other functions:
# inside the PolarPatch class:
# inside def __init__
        assert split in ["train", "val", "real"]
        #load meta here
        
        if split == "train":
            meta = meta[:train_dim]
        elif split == "real":
            self.transform = transform
            return
        else:
            meta = meta[train_dim:]          
         
        #everything else unchanged

    def __getitem__(self, index,split="train"):
        assert split in ["train", "val", "real"]

        if split == "real":
          x = tensorlist
        else:
          x = Image.open(SAMPLING_DIR + str(index) + ".png") # change this file format if needed
        y = self.targets[index]
        coord = self.coords[index]

        if self.transform:
        	x = self.transform(x)

        return x, y, coord
        
        

real_set = PolarPatch(
    split = 'real',
    transform = data_transform
)

real_loader = torch.utils.data.DataLoader(
    test_set,
    batch_size=5,
    shuffle=False,
    num_workers=2
)




# to run: 
for i, data in enumerate(real_loader, 0):
      inputs, labels, coords = data
      inputs = inputs.to(DEVICE)
      labels = labels.to(DEVICE)
        # Zero the parameter gradients
      optimizer.zero_grad()

      # Forward, backward, and update parameters
      outputs = net(inputs)
